#!/bin/bash

# GraphDone Test Runner Script

set -e

# Default options
COVERAGE=false
WATCH=false
PACKAGE=""
E2E=false
UNIT=false
REPORT=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --coverage|-c)
            COVERAGE=true
            shift
            ;;
        --watch|-w)
            WATCH=true
            shift
            ;;
        --package|-p)
            PACKAGE="$2"
            shift 2
            ;;
        --e2e|-e)
            E2E=true
            shift
            ;;
        --unit|-u)
            UNIT=true
            shift
            ;;
        --report|-r)
            REPORT=true
            shift
            ;;
        --help|-h)
            echo "GraphDone Test Runner"
            echo ""
            echo "Usage: ./test.sh [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --coverage, -c          Run tests with coverage report"
            echo "  --watch, -w             Run tests in watch mode"
            echo "  --package PKG, -p PKG   Run tests for specific package (core, server, web)"
            echo "  --unit, -u              Run unit tests only (skip E2E)"
            echo "  --e2e, -e               Run end-to-end tests only (skip unit)"
            echo "  --report, -r            Generate comprehensive test report"
            echo "  --help, -h              Show this help message"
            echo ""
            echo "Examples:"
            echo "  ./test.sh                    # Run all tests"
            echo "  ./test.sh --coverage         # Run with coverage"
            echo "  ./test.sh --package core     # Test only core package"
            echo "  ./test.sh --watch            # Run in watch mode"
            echo "  ./test.sh --unit             # Run unit tests only"
            echo "  ./test.sh --e2e              # Run end-to-end tests only"
            echo "  ./test.sh --report           # Generate comprehensive report"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Generate test report function
generate_report() {
    local report_file="test-results/consolidated-test-report.md"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    mkdir -p test-results
    
    echo "# GraphDone Test Report" > "$report_file"
    echo "Generated: $timestamp" >> "$report_file"
    echo "" >> "$report_file"
    
    echo "## Test Summary" >> "$report_file"
    echo "| Package | Unit Tests | Status |" >> "$report_file"
    echo "|---------|------------|--------|" >> "$report_file"
    
    # Core package results
    if [ -f "packages/core/test-results.json" ]; then
        echo "| Core | ✅ Passed | Complete |" >> "$report_file"
    else
        echo "| Core | ❌ Failed | Check logs |" >> "$report_file"
    fi
    
    # Server package results  
    if [ -f "packages/server/test-results.json" ]; then
        echo "| Server | ✅ Passed | Complete |" >> "$report_file"
    else
        echo "| Server | ❌ Failed | Check logs |" >> "$report_file"
    fi
    
    # Web package results
    if [ -f "packages/web/test-results.json" ]; then
        echo "| Web | ✅ Passed | Complete |" >> "$report_file"
    else
        echo "| Web | ❌ Failed | Check logs |" >> "$report_file"
    fi
    
    echo "" >> "$report_file"
    echo "## E2E Test Results" >> "$report_file"
    
    # Check for Playwright HTML report
    if [ -f "playwright-report/index.html" ]; then
        echo "✅ E2E tests completed. View detailed report: [playwright-report/index.html](playwright-report/index.html)" >> "$report_file"
    else
        echo "❌ E2E tests not run or failed" >> "$report_file"
    fi
    
    echo "" >> "$report_file"
    echo "## Coverage Reports" >> "$report_file"
    
    for pkg in core server web; do
        if [ -d "packages/$pkg/coverage" ]; then
            echo "- [$pkg Coverage](packages/$pkg/coverage/index.html)" >> "$report_file"
        fi
    done
    
    echo "" >> "$report_file"
    echo "Generated by GraphDone test suite" >> "$report_file"
    
    echo "📊 Consolidated test report generated: $report_file"
}

# Main test execution
echo "🧪 Running GraphDone tests..."

# Initialize result tracking
TEST_FAILED=false

# Determine what to run
if [ "$UNIT" = true ] && [ "$E2E" = true ]; then
    echo "❌ Cannot specify both --unit and --e2e. Choose one or omit both for full suite."
    exit 1
fi

# Set defaults if neither unit nor e2e specified
if [ "$UNIT" = false ] && [ "$E2E" = false ]; then
    RUN_UNIT=true
    RUN_E2E=true
else
    RUN_UNIT=$UNIT
    RUN_E2E=$E2E
fi

# Run linting and type checking (unless only E2E requested)
if [ "$RUN_UNIT" = true ]; then
    echo "🔍 Running linter..."
    if ! npm run lint; then
        TEST_FAILED=true
        echo "❌ Linting failed"
    fi

    echo "🔧 Running type checker..."
    if ! npm run typecheck; then
        TEST_FAILED=true
        echo "❌ Type checking failed"
    fi
fi

# Run unit tests
if [ "$RUN_UNIT" = true ]; then
    echo "🧪 Running unit tests..."
    
    if [ -n "$PACKAGE" ]; then
        echo "📦 Testing package: $PACKAGE"
        if [ "$COVERAGE" = true ]; then
            TEST_CMD="cd packages/$PACKAGE && npm run test:coverage"
        elif [ "$WATCH" = true ]; then
            TEST_CMD="cd packages/$PACKAGE && npm run test -- --watch"
        else
            TEST_CMD="cd packages/$PACKAGE && npm run test -- --run"
        fi
    else
        echo "📦 Testing all packages"
        if [ "$COVERAGE" = true ]; then
            TEST_CMD="turbo run test:coverage"
        elif [ "$WATCH" = true ]; then
            TEST_CMD="turbo run test -- --watch"
        else
            TEST_CMD="turbo run test -- --run"
        fi
    fi
    
    if ! eval $TEST_CMD; then
        TEST_FAILED=true
        echo "❌ Unit tests failed"
    fi
fi

# Run E2E tests
if [ "$RUN_E2E" = true ]; then
    echo "🌐 Installing Playwright browsers if needed..."
    if ! npx playwright install --with-deps chromium; then
        echo "⚠️  Browser installation failed, continuing with existing browsers..."
    fi
    
    echo "🌐 Running end-to-end tests..."
    if ! npx playwright test --config=playwright.config.ts; then
        TEST_FAILED=true
        echo "❌ E2E tests failed"
    fi
fi

# Generate report if requested
if [ "$REPORT" = true ]; then
    generate_report
fi

# Final status
if [ "$TEST_FAILED" = true ]; then
    echo "❌ Some tests failed!"
    exit 1
else
    echo "✅ All tests completed successfully!"
fi

# Show coverage summary if coverage was run
if [ "$COVERAGE" = true ] && [ "$RUN_UNIT" = true ]; then
    echo ""
    echo "📊 Coverage reports generated:"
    if [ -n "$PACKAGE" ]; then
        echo "  packages/$PACKAGE/coverage/"
    else
        find packages -name "coverage" -type d 2>/dev/null | sed 's/^/  /' || echo "  No coverage reports found"
    fi
fi