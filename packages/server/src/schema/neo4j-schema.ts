import { gql } from 'graphql-tag';

export const typeDefs = gql`
  # Enums
  enum NodeType {
    OUTCOME
    TASK
    MILESTONE
    IDEA
  }

  enum NodeStatus {
    PROPOSED
    PLANNED
    ACTIVE
    IN_PROGRESS
    BLOCKED
    COMPLETED
    ARCHIVED
  }

  enum EdgeType {
    DEPENDENCY
    BLOCKS
    RELATES_TO
    CONTAINS
  }

  enum ContributorType {
    HUMAN
    AI_AGENT
  }

  # WorkItem entity - represents work items in the graph
  type WorkItem {
    id: ID! @id
    type: NodeType!
    title: String!
    description: String
    positionX: Float! @default(value: 0.0)
    positionY: Float! @default(value: 0.0)
    positionZ: Float! @default(value: 0.0)
    radius: Float! @default(value: 1.0)
    theta: Float! @default(value: 0.0)
    phi: Float! @default(value: 0.0)
    priorityExec: Float! @default(value: 0.0)
    priorityIndiv: Float! @default(value: 0.0)
    priorityComm: Float! @default(value: 0.0)
    priorityComp: Float! @default(value: 0.0)
    status: NodeStatus! @default(value: PROPOSED)
    metadata: String # JSON as string
    
    # Data isolation fields
    teamId: String @default(value: "default-team")
    userId: String @default(value: "default-user")
    
    createdAt: DateTime! @timestamp(operations: [CREATE])
    updatedAt: DateTime! @timestamp

    # Relationships
    dependencies: [WorkItem!]! @relationship(type: "DEPENDS_ON", direction: OUT)
    dependents: [WorkItem!]! @relationship(type: "DEPENDS_ON", direction: IN)
    contributors: [Contributor!]! @relationship(type: "CONTRIBUTES_TO", direction: IN)
    sourceEdges: [Edge!]! @relationship(type: "EDGE", direction: OUT)
    targetEdges: [Edge!]! @relationship(type: "EDGE", direction: IN)
  }

  # Contributor entity - humans and AI agents
  type Contributor {
    id: ID! @id
    type: ContributorType!
    name: String!
    email: String @unique
    avatarUrl: String
    capabilities: String # JSON as string
    metadata: String # JSON as string
    
    # Data isolation fields
    teamId: String @default(value: "default-team")
    
    createdAt: DateTime! @timestamp(operations: [CREATE])
    updatedAt: DateTime! @timestamp

    # Relationships
    workItems: [WorkItem!]! @relationship(type: "CONTRIBUTES_TO", direction: OUT)
  }

  # Edge entity - relationships between nodes
  type Edge {
    id: ID! @id
    type: EdgeType!
    weight: Float! @default(value: 1.0)
    metadata: String # JSON as string
    
    # Data isolation fields
    teamId: String @default(value: "default-team")
    userId: String @default(value: "default-user")
    
    createdAt: DateTime! @timestamp(operations: [CREATE])

    # Relationships
    source: WorkItem! @relationship(type: "EDGE_SOURCE", direction: OUT)
    target: WorkItem! @relationship(type: "EDGE_TARGET", direction: OUT)
  }

  # All input types will be auto-generated by Neo4j GraphQL

  # Neo4j GraphQL will auto-generate Query and Mutation types

  type Subscription {
    workItemCreated: WorkItem!
    workItemUpdated: WorkItem!
    workItemDeleted: ID!
    edgeCreated: Edge!
    edgeUpdated: Edge!
    edgeDeleted: ID!
    contributorCreated: Contributor!
    contributorUpdated: Contributor!
    contributorDeleted: ID!
  }
`;