name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, development]

# Prevent duplicate runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'

jobs:
  # Fast checks that can run in parallel
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run typecheck

  # Security scanning can run in parallel with other checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run npm audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: |
          echo "üîç Security scan completed"
          # Add more security tools here as needed

  # Core package tests (lightweight, no external services)
  test-core:
    name: Core Package Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Test core package
        run: npm run test:coverage --workspace=@graphdone/core

      - name: Upload core coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./packages/core/coverage
          flags: core
          fail_ci_if_error: false

  # Server package tests (requires database services)
  test-server:
    name: Server Package Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: graphdone_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      neo4j:
        image: neo4j:5.15-community
        env:
          NEO4J_AUTH: neo4j/graphdone_test_password
          NEO4J_PLUGINS: '["graph-data-science", "apoc"]'
          NEO4J_dbms_security_procedures_unrestricted: "gds.*,apoc.*"
          NEO4J_dbms_security_procedures_allowlist: "gds.*,apoc.*"
        options: >-
          --health-cmd "cypher-shell -u neo4j -p graphdone_test_password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 7474:7474
          - 7687:7687

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Test server package
        run: npm run test:coverage --workspace=@graphdone/server
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/graphdone_test
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: graphdone_test_password

      - name: Upload server coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./packages/server/coverage
          flags: server
          fail_ci_if_error: false

  # Web package build (no tests exist yet, just build validation)
  test-web:
    name: Web Package Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build web package (validates TypeScript and bundling)
        run: npm run build --workspace=@graphdone/web

      # TODO: Add actual web package tests
      - name: Web tests placeholder
        run: |
          echo "‚ö†Ô∏è Web package tests not implemented yet"
          echo "TODO: Add React component tests, integration tests"
          echo "Build validation passed - TypeScript compilation successful"

  # MCP server tests (includes input validation and security tests)
  test-mcp-server:
    name: MCP Server Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build MCP server
        run: npm run build --workspace=@graphdone/mcp-server

      - name: Run unit tests
        run: npm run test --workspace=@graphdone/mcp-server
        env:
          CI: true

      - name: Test input validation and security (CI-safe tests)
        run: npm run test:safe:ci --workspace=@graphdone/mcp-server
        env:
          CI: true

      - name: Run mock validation tests  
        run: npm run test --workspace=@graphdone/mcp-server -- mock-validation.test.ts

      - name: Upload MCP server coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./packages/mcp-server/coverage
          flags: mcp-server
          fail_ci_if_error: false

  # Build job - runs after all tests pass, prepares for potential deployment
  build:
    name: Build for Deployment
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, security-scan, test-core, test-server, test-web, test-mcp-server]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build all packages
        run: npm run build

      - name: Create deployment artifact
        run: |
          mkdir -p deployment-artifacts
          
          # Copy built packages
          cp -r packages/*/dist deployment-artifacts/ 2>/dev/null || true
          
          # Copy package.json files for production deployment
          find packages -name "package.json" -exec cp --parents {} deployment-artifacts/ \;
          
          # Copy deployment configs
          cp -r deployment deployment-artifacts/ 2>/dev/null || true
          
          # Copy environment example
          cp .env.example deployment-artifacts/ 2>/dev/null || true
          
          echo "üì¶ Deployment artifacts prepared"
          ls -la deployment-artifacts/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-build-${{ github.sha }}
          path: deployment-artifacts/
          retention-days: 30

      # Future: Docker build and registry push will go here
      - name: Prepare for Docker build (placeholder)
        run: |
          echo "üê≥ Future: Docker build and push to registry"
          echo "This will build and push images for:"
          echo "- GraphDone Web Application"  
          echo "- GraphDone API Server"
          echo "- GraphDone MCP Server"
          echo "- Complete deployment ready for auto-deploy to test server"

  # Summary job - provides overall status
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, security-scan, test-core, test-server, test-web, test-mcp-server]
    if: always()
    steps:
      - name: Check overall status
        run: |
          # Check if all required jobs passed
          LINT_STATUS="${{ needs.lint-and-typecheck.result }}"
          SECURITY_STATUS="${{ needs.security-scan.result }}"
          CORE_STATUS="${{ needs.test-core.result }}"
          SERVER_STATUS="${{ needs.test-server.result }}"
          WEB_STATUS="${{ needs.test-web.result }}"
          MCP_STATUS="${{ needs.test-mcp-server.result }}"
          
          echo "üìä CI Pipeline Results:"
          echo "- Lint & TypeCheck: $LINT_STATUS"
          echo "- Security Scan: $SECURITY_STATUS" 
          echo "- Core Tests: $CORE_STATUS"
          echo "- Server Tests: $SERVER_STATUS"
          echo "- Web Build: $WEB_STATUS"
          echo "- MCP Tests: $MCP_STATUS"
          
          if [[ "$LINT_STATUS" == "success" && "$CORE_STATUS" == "success" && 
                "$SERVER_STATUS" == "success" && "$WEB_STATUS" == "success" && 
                "$MCP_STATUS" == "success" ]]; then
            echo "‚úÖ All essential CI jobs completed successfully!"
            echo "Note: Security scan failures don't block CI (continue-on-error)"
          else
            echo "‚ùå CI pipeline failed - check individual job results above"
            exit 1
          fi